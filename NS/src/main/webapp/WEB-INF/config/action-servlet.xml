<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- package 이름이 NS로 시작하는 컨드롤러들만 스캔한다.-->
	<context:component-scan base-package="ns" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!-- LoggerAspect라는 클래스는 Controller, Service, DAO가 실행될 때, 어떤 계층의 어떤 메서드가 
		실행되었는지를 보여주는 역할을 한다. -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="loggerAspect" class="ns.common.logger.LoggerAspect" />
   
   <!-- 빈 객체를 사용하는 대신에 맵을 활용해서 파라미터를 수정 추가 등록하는 작업을 하기 위해서 추가 -->
   <!-- HandlerMapping, HandlerAdapter자동 설정 -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="ns.common.resolver.CustomMapArgumentResolver"></bean>		
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
    <!-- 전체경로 매핑 /를 사용하기위한 디폴트 서블릿 설정 -->
	<mvc:default-servlet-handler/>
	
	<!-- 로그 인터셉터  -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean id="loggerInterceptor" class="ns.common.logger.LoggerInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- 회원 인터셉터  -->
	<mvc:interceptors>
		<mvc:interceptor>
		<!-- 모든 경로에 인터셉터 적용  -->
			<mvc:mapping path="/**"/> 
			<!-- 인터셉터를 거치지 않는 (비회원도 접속 가능한) 경로 -->
			<mvc:exclude-mapping path="/main"/>
			<mvc:exclude-mapping path="/join*/**"/> 
			<mvc:exclude-mapping path="/join/**"/>
			<mvc:exclude-mapping path="/shop/totalList"/>
			<mvc:exclude-mapping path="/shop/goodsDetail"/>
			<mvc:exclude-mapping path="/shop/display"/>
			<mvc:exclude-mapping path="/login*/**"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/find*"/>
			<mvc:exclude-mapping path="/resources/**"/>
			<mvc:exclude-mapping path="/css/**"/>
			<mvc:exclude-mapping path="/js/**"/>
			<mvc:exclude-mapping path="/image/**"/>
			<mvc:exclude-mapping path="/fonts/**"/>
			<mvc:exclude-mapping path="/scss/**"/>
			<!-- 공지사항이나 FAQ 부분도 추가 가능 -->
			<bean id="LoginInterceptor" class="ns.common.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- 관리자 인터셉터 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 관리자 인터셉터 적용 경로 -->
			<mvc:mapping path="/admin/**"/> 
			<bean id="adminLoginInterceptor" class="ns.common.interceptor.AdminLoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- 자동 로그인 인터셉터 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 자동 로그인 인터셉터 적용 경로 -->
			<mvc:mapping path="/**"/> 
			<!-- 자동 로그인 인터셉터 적용하지 않는 경로 -->
			<mvc:exclude-mapping path="/logout"/>
			<bean id="cookieInterceptor" class="ns.common.interceptor.CookieInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- resources 경로 설정 -->
	<!-- resources 경로 밑에 폴더 추가될 때마다 추가하기 -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	<mvc:resources location="/resources/css/" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/resources/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/resources/image/" mapping="/image/**"></mvc:resources>
	<mvc:resources location="/resources/fonts/" mapping="/fonts/**"></mvc:resources>
	<mvc:resources location="/resources/scss/" mapping="/scss/**"></mvc:resources>
	
	<!-- @RequestMapping 어노테이션을 활용하여 컨트롤러를 사용하기 위해 빈 추가 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    
    <!-- 컨트롤러에서 리턴 받은 뷰의 이름과 빈에 등록되어 있는 id의 값이 같은것을 찾아 실행 시킨다 .페이징-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />
     <!-- 컨트롤러에서 jsp 맵핑 설정 Modelandview 객체를 리턴 받았을 때 -->
    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2"></property>
	</bean>
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
		<property name="order" value="1"></property> 
	</bean>
	
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
		<property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory"/>
	</bean>
    
    <!-- 컨트롤러가 리턴한 객체의 내용을 분석하여 JSON포맷으로 변환. -->
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
    
   
    
   
   	<!--  참고 offbyone.tistory.com/167
   	<bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="ezenyoon@gmail.com" />
      <property name="password" value="ezenacademy@" />
    
      <property name="javaMailProperties">
         <props>
               <prop key="mail.transport.protocol">smtp</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.starttls.enable">true</prop>
               <prop key="mail.debug">true</prop>
         </props>
      </property>
    </bean>
    -->
</beans>